#include<stdio.h>
#include<stdlib.h>
struct jh
{
    int n;
    struct jh *next;
};
struct jh * jianbiao()    /*创建空链表*/
{
    struct jh *head;
    head=(struct jh *)malloc(sizeof(struct jh));
    if(head!=NULL)
        head->next=NULL;
    else
        printf("Out of space!\n");
    return head;
}
void shuru(struct jh *head,int n)/*输入*/
{
    int i;
    struct jh *p1,*t;
    printf("请有序输入递增集合元素：\n");
    for(i=0;i<n;i++)
	{
        p1=(struct jh*)malloc(sizeof(struct jh));
        scanf("%d",&p1->n);
        t=head;
        while(t->next!=NULL)
        t=t->next;
        t->next=p1;
        p1->next=NULL;
 }
}

void shuchu(struct jh *head)/*输出*/
{
     struct jh *p1;
     p1=head->next;
     printf("并集结果如下:  \n");
     while(p1!=NULL)
	 {
         printf("%d ",p1->n);
         p1=p1->next;
	 }
     printf("\n");
}
int bingji(struct jh *p1,struct jh *p2)/*取并集*/
{
	struct jh *t;
	p1=p1->next;
    while(p2!=NULL)
	{
	  
	     p2=p2->next;
		   if(p1->n==p2->n)
			  p2=p2->next;
		   if(p1->n < p2->n)
		   {
			   while(1)
			   {
				  if(p1->next==NULL&&p1->n < p2->n)
				  {
					p1->next=p2;
					return 0;
				  }
				if(p1->n==p2->n)
				{
					if(p2->next==NULL)
						return 0;
					p2=p2->next;
					break;
				}
				if(p1->n > p2->n)
					break;
				if(p1->next==NULL&&p1->n<p2->n)
					p1->next=p2;
				    p1=p1->next;
			   }
		   }

		   if(p1->n > p2->n)
		   {
			   t=(struct jh *)malloc(sizeof(struct jh));
			   t->n=p1->n;
			   t->next=p1->next;
			   p1->n=p2->n;
			   p1->next=t;
		   }
		   if(p2->next==NULL)
			   break;
  }
  return 0;
}
int menu()
{
	int i;
	printf("    输入数字1 有序递增集合A和B        \n");
	printf("    数字2 合并集合A和B并输出结果      \n");
	printf("    数字3 结束程序                    \n");
	printf("请选择功能序号: ");
	scanf("%d",&i);
	return i;
}
int main()
{
    int t,k;
    struct jh *p1,*p2;
    p1=jianbiao();
    p2=jianbiao();
    while(1)
	{
	    k=menu();
	    if(k==1)
		{

	        printf("请输入集合A元素个数:  ");
		    scanf("%d",&t);
	        shuru(p1,t);
	        printf("请输入集合B元素个数:  ");
		    scanf("%d",&t);
	        shuru(p2,t);
		}

	    if(k==2)
		{
	        bingji(p1,p2);
	        shuchu(p1);
		}

	    if(k==3)
		{
		    printf("程序结束！\n");
		    return 0;
		}
	    if(k!=1&&k!=2&&k!=3)
		    printf("输入错误！请重新输入：\n");
 }

}